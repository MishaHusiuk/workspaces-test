name: Publish NPM package
run-name: Publish PR Version

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled, unlabeled]

env:
  PR_NUMBER: ${{ github.event.pull_request.number }}

jobs:
  publish_npm:
    name: Publish package
    runs-on: ubuntu-latest

    permissions:
      packages: write
      contents: read
    
    if: contains(github.event.pull_request.labels.*.name, 'pr deploy') || github.event_name == 'push'

    steps:
      - name: Checkout PR
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
        working-directory: ./packages/io
      - name: Authenticate npm registry
        run: |
          cat <<'EOF' >> .npmrc
          registry=https://npm.pkg.github.com
          //npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}
          always-auth=true
          EOF
      - name: Get PR version
        if: ${{ env.PR_NUMBER != '' }}
        id: version
        working-directory: packages/io
        run: |
          CURRENT_VERSION=$(cat package.json | jq -r .version)
          PR_DEPLOY_VERSION=$CURRENT_VERSION-pr${{ env.PR_NUMBER }}
          echo "pr_deploy_version=$PR_DEPLOY_VERSION" >> $GITHUB_OUTPUT
  
      - name: Set next PR version
        if: ${{ steps.version.outputs.pr_deploy_version != '' }}
        id: pr-version
        working-directory: packages/io
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #Determine next version

          gh api \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /orgs/MishaHusiuk/packages/npm/io/versions?per_page=90 \
          | jq -r '[ .[] | select(.name | contains("${{ steps.version.outputs.pr_deploy_version }}"))] | map(.name) | .[]' \
          >pre-tags.txt

          if [[ $(wc -l <pre-tags.txt) -lt 1 ]]; then
            # First beta version published
            NEXT_VERSION=$(echo ${{ steps.version.outputs.pr_deploy_version }}.0)
          else
            # Get last beta version published
            CURRENT_PRE_VERSION=$(cat pre-tags.txt | cut -d. -f4 | sort -g | tail -n1)
            echo "::debug::Last beta version published: $CURRENT_PRE_VERSION"

            NEXT_VERSION=$(echo ${{ steps.version.outputs.pr_deploy_version }}.$((CURRENT_PRE_VERSION + 1)))
          fi

          npm pkg set version=$NEXT_VERSION
    
      - name: Publish to npm 
        env:
          NODE_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}
        working-directory: ./packages/io
        run: npm publish

