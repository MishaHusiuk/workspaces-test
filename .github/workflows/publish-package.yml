name: Publish
run-name: ${{ inputs.package }}

on:
  workflow_dispatch:
    inputs:
      package:
        required: true
        type: choice
        options:
          - math-operations
          - io

jobs:
  publish_npm:
    name: Publish package
    runs-on: ubuntu-latest

    timeout-minutes: 30
    permissions:
      packages: write
      contents: write

    steps:
      - name: Check branch name
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          if [[ "$BRANCH_NAME" != release/* && "$BRANCH_NAME" != "main" ]]; then
            echo "❌ This workflow can only be triggered on 'release/*' branches or 'main'."
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Retrieve node version
        run: |
          echo "NODE_VERSION=$(cat package.json | jq -r .engines.node)" >> $GITHUB_OUTPUT
        id: node_version

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}
          # registry-url: 'https://npm.pkg.github.com'
          # always-auth: true
          # scope: '@mishahusiuk'
      - name: Install package dependencies
        working-directory: packages/${{ inputs.package }}
        run: npm install

      - name: Prepare auth token
        run: |
          cat <<'EOF' >> .npmrc
          registry=https://npm.pkg.github.com/
          //npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}
          always-auth=true
          EOF

      - name: Tag npm package as maintenance
        working-directory: packages/${{ inputs.package }}
        if: startsWith(github.ref, 'refs/heads/release/')
        run: npm pkg set publishConfig.tag=maintenance

      - name: Publish NPM
        id: publish
        working-directory: packages/${{ inputs.package }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_OPTIONS: --max-old-space-size=4096
        run: |
          npm publish
          PUBLISHED_VERSION=$(cat package.json | jq -r .version)
          echo "published_version=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
          echo "published version: $PUBLISHED_VERSION"

      - name: Create tag
        run: |
          git config user.email "ci-bot@mishahusiuk.com"
          git config user.name "ci-bot"
          TAG=${{inputs.package}}@${{steps.publish.outputs.published_version}}
          echo $TAG
          git tag --force -m "$TAG" $TAG ${{ github.sha }}
          echo "commit tagged"
          git push origin $TAG --force